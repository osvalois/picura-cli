// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = "postgresql://picura_owner:bQrvXHJjOl69@ep-sparkling-surf-a5uworvl.us-east-2.aws.neon.tech/picura?sslmode=require&schema=projects"
  directUrl = "postgresql://picura_owner:bQrvXHJjOl69@ep-sparkling-surf-a5uworvl.us-east-2.aws.neon.tech/picura?sslmode=require&schema=projects"
}

model Project {
  id                String         @id @default(nanoid())
  name              String         @db.VarChar(255)
  description       String?        @db.Text
  repoUrl           String?        @db.VarChar(512)
  path              String         @db.VarChar(512)
  externalOwnerId   String         @db.VarChar(128)
  externalCompanyId String         @db.VarChar(128)
  createdAt         DateTime       @default(now()) @db.Timestamp(6)
  updatedAt         DateTime       @updatedAt @db.Timestamp(6)
  isActive          Boolean        @default(true)
  documents         Document[]
  codeAnalyses      CodeAnalysis[] // Added this line
  deployments       Deployment[] // Added this line
  aiAssistants      AIAssistant[] // Added this line
  secretKey         String         @db.Text

  @@index([externalOwnerId, externalCompanyId])
  @@map("picura_projects")
}

// Rest of the models remain the same

model Document {
  id          String            @id @default(cuid())
  title       String            @db.VarChar(255)
  type        DocumentType
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  versions    DocumentVersion[]
  createdAt   DateTime          @default(now()) @db.Timestamp(6)
  updatedAt   DateTime          @updatedAt @db.Timestamp(6)
  isEncrypted Boolean           @default(true)

  @@index([projectId, type])
  @@map("picura_documents")
}

model DocumentVersion {
  id               String   @id @default(cuid())
  content          String   @db.Text
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId       String
  externalAuthorId String   @db.VarChar(128)
  version          Int
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  checksum         String   @db.VarChar(64)

  @@unique([documentId, version])
  @@index([documentId, externalAuthorId])
  @@map("picura_document_versions")
}

model CodeAnalysis {
  id               String       @id @default(cuid())
  project          Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
  analysisDate     DateTime     @default(now()) @db.Timestamp(6)
  codeQualityScore Float
  securityScore    Float
  performanceScore Float
  recommendations  Json
  rawAnalysisData  Json
  analysisType     AnalysisType

  @@index([projectId, analysisDate])
  @@map("picura_code_analyses")
}

model Deployment {
  id                 String                @id @default(cuid())
  project            Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId          String
  environment        DeploymentEnvironment
  status             DeploymentStatus
  deployedAt         DateTime              @default(now()) @db.Timestamp(6)
  deploymentLogs     String                @db.Text
  rollbackStatus     RollbackStatus?
  externalDeployerId String                @db.VarChar(128)

  @@index([projectId, environment, status])
  @@map("picura_deployments")
}

model AIAssistant {
  id           String          @id @default(cuid())
  name         String          @db.VarChar(255)
  description  String?         @db.Text
  model        String          @db.VarChar(128)
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  interactions AIInteraction[]
  createdAt    DateTime        @default(now()) @db.Timestamp(6)
  updatedAt    DateTime        @updatedAt @db.Timestamp(6)
  isActive     Boolean         @default(true)

  @@index([projectId])
  @@map("picura_ai_assistants")
}

model AIInteraction {
  id             String      @id @default(cuid())
  assistant      AIAssistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId    String
  externalUserId String      @db.VarChar(128)
  query          String      @db.Text
  response       String      @db.Text
  feedbackRating Int?
  createdAt      DateTime    @default(now()) @db.Timestamp(6)

  @@index([assistantId, externalUserId])
  @@map("picura_ai_interactions")
}

model AuditLog {
  id             String      @id @default(cuid())
  externalUserId String      @db.VarChar(128)
  action         AuditAction
  entityType     String      @db.VarChar(50)
  entityId       String
  details        Json?
  ipAddress      String?     @db.VarChar(45)
  userAgent      String?     @db.Text
  timestamp      DateTime    @default(now()) @db.Timestamp(6)

  @@index([externalUserId, action, entityType])
  @@map("picura_audit_logs")
}

// Enums remain the same

enum DocumentType {
  ARCHITECTURE
  DATA_SCHEMA
  DEPLOYMENT
  API_SPECIFICATION
  USER_MANUAL
}

enum DeploymentEnvironment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum DeploymentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum RollbackStatus {
  NOT_REQUIRED
  PENDING
  COMPLETED
  FAILED
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  DEPLOY
  ROLLBACK
  ANALYZE
  AI_INTERACTION
}

enum AnalysisType {
  STATIC
  DYNAMIC
  SECURITY
  PERFORMANCE
}
