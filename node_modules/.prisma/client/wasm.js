
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.19.1
 * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
 */
Prisma.prismaVersion = {
  client: "5.19.1",
  engine: "69d742ee20b815d88e17e54db4a2a7a3b30324e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  repoUrl: 'repoUrl',
  path: 'path',
  externalOwnerId: 'externalOwnerId',
  externalCompanyId: 'externalCompanyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  secretKey: 'secretKey'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isEncrypted: 'isEncrypted'
};

exports.Prisma.DocumentVersionScalarFieldEnum = {
  id: 'id',
  content: 'content',
  documentId: 'documentId',
  externalAuthorId: 'externalAuthorId',
  version: 'version',
  createdAt: 'createdAt',
  checksum: 'checksum'
};

exports.Prisma.CodeAnalysisScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  analysisDate: 'analysisDate',
  codeQualityScore: 'codeQualityScore',
  securityScore: 'securityScore',
  performanceScore: 'performanceScore',
  recommendations: 'recommendations',
  rawAnalysisData: 'rawAnalysisData',
  analysisType: 'analysisType'
};

exports.Prisma.DeploymentScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  environment: 'environment',
  status: 'status',
  deployedAt: 'deployedAt',
  deploymentLogs: 'deploymentLogs',
  rollbackStatus: 'rollbackStatus',
  externalDeployerId: 'externalDeployerId'
};

exports.Prisma.AIAssistantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  model: 'model',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.AIInteractionScalarFieldEnum = {
  id: 'id',
  assistantId: 'assistantId',
  externalUserId: 'externalUserId',
  query: 'query',
  response: 'response',
  feedbackRating: 'feedbackRating',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  externalUserId: 'externalUserId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  repoUrl: 'repoUrl',
  path: 'path',
  externalOwnerId: 'externalOwnerId',
  externalCompanyId: 'externalCompanyId',
  secretKey: 'secretKey'
};

exports.Prisma.DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  projectId: 'projectId'
};

exports.Prisma.DocumentVersionOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  documentId: 'documentId',
  externalAuthorId: 'externalAuthorId',
  checksum: 'checksum'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.CodeAnalysisOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.DeploymentOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  deploymentLogs: 'deploymentLogs',
  externalDeployerId: 'externalDeployerId'
};

exports.Prisma.AIAssistantOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  model: 'model',
  projectId: 'projectId'
};

exports.Prisma.AIInteractionOrderByRelevanceFieldEnum = {
  id: 'id',
  assistantId: 'assistantId',
  externalUserId: 'externalUserId',
  query: 'query',
  response: 'response'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  externalUserId: 'externalUserId',
  entityType: 'entityType',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};
exports.DocumentType = exports.$Enums.DocumentType = {
  ARCHITECTURE: 'ARCHITECTURE',
  DATA_SCHEMA: 'DATA_SCHEMA',
  DEPLOYMENT: 'DEPLOYMENT',
  API_SPECIFICATION: 'API_SPECIFICATION',
  USER_MANUAL: 'USER_MANUAL'
};

exports.AnalysisType = exports.$Enums.AnalysisType = {
  STATIC: 'STATIC',
  DYNAMIC: 'DYNAMIC',
  SECURITY: 'SECURITY',
  PERFORMANCE: 'PERFORMANCE'
};

exports.DeploymentEnvironment = exports.$Enums.DeploymentEnvironment = {
  DEVELOPMENT: 'DEVELOPMENT',
  STAGING: 'STAGING',
  PRODUCTION: 'PRODUCTION'
};

exports.DeploymentStatus = exports.$Enums.DeploymentStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.RollbackStatus = exports.$Enums.RollbackStatus = {
  NOT_REQUIRED: 'NOT_REQUIRED',
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  READ: 'READ',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  DEPLOY: 'DEPLOY',
  ROLLBACK: 'ROLLBACK',
  ANALYZE: 'ANALYZE',
  AI_INTERACTION: 'AI_INTERACTION'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  Document: 'Document',
  DocumentVersion: 'DocumentVersion',
  CodeAnalysis: 'CodeAnalysis',
  Deployment: 'Deployment',
  AIAssistant: 'AIAssistant',
  AIInteraction: 'AIInteraction',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
