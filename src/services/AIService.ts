import { Configuration, OpenAIApi } from 'openai';
import { DocumentType } from '@prisma/client';
import { LoggingService } from './LoggingService';
import { DocumentGenerator } from '../utils/DocumentGenerator';

export class AIService {
  private openai: OpenAIApi;
  private logger: LoggingService;
  private documentGenerator: DocumentGenerator;

  constructor(logger: LoggingService) {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY is not set in environment variables');
    }
    const configuration = new Configuration({
      apiKey: apiKey,
    });
    this.openai = new OpenAIApi(configuration);
    this.logger = logger;
    this.documentGenerator = new DocumentGenerator();
  }

  async generateDocumentContent(type: DocumentType, projectStructure: string): Promise<string> {
    try {
      this.logger.info(`Generating document content for type: ${type}`);
      const systemPrompt = this.documentGenerator.getSystemPromptForDocumentType(type);
      const userPrompt = `Given the following project structure:\n\n${projectStructure}\n\nGenerate the document content based on this structure.`;
      
      const response = await this.openai.createChatCompletion({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 3000,
        temperature: 0.7,
      });

      if (!response.data.choices[0].message?.content) {
        throw new Error('No content generated by AI');
      }

      const rawContent = response.data.choices[0].message.content;
      const formattedContent = this.documentGenerator.formatGeneratedContent(type, rawContent);
      this.logger.info(`Document content generated successfully for type: ${type}`);
      return formattedContent;
    } catch (error: any) {
      this.logger.error(`Failed to generate document content for type: ${type}`, { 
        error: error.message,
        response: error.response?.data
      });
      throw new Error(`Failed to generate document: ${error.message}`);
    }
  }

  async testOpenAIConnection(): Promise<void> {
    try {
      const response = await this.openai.createChatCompletion({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: 'Hello, OpenAI!' }],
      });
      this.logger.info('OpenAI connection test successful');
    } catch (error: any) {
      this.logger.error('OpenAI connection test failed', { 
        error: error.message,
        response: error.response?.data
      });
      throw new Error('Failed to connect to OpenAI API');
    }
  }
}