//AIService.ts
import OpenAI from 'openai';
import { DocumentType } from '@prisma/client';
import { LoggingService } from './LoggingService';
import { ProjectAnalyzer } from "../utils/ProjectAnalyzer.js";
import { MDToPDFConverter } from "../utils/MDToPDFConverter.js";
import { DocumentGenerator } from "../ai/DocumentGenerator.js";

export class AIService {
  private client: OpenAI;
  private logger: LoggingService;
  private projectAnalyzer: ProjectAnalyzer;
  private mDToPDFConverter: MDToPDFConverter;
  private documentGenerator: DocumentGenerator;

  constructor(logger: LoggingService) {
    this.client = new OpenAI({
      apiKey: process.env['OPENAI_API_KEY'],
    });
    this.logger = logger;
    this.projectAnalyzer = new ProjectAnalyzer();
    this.mDToPDFConverter = new MDToPDFConverter();
    this.documentGenerator = new DocumentGenerator();
  }

  async generateDocumentContent(type: DocumentType, projectPath: string): Promise<{ md: string; pdf: Buffer }> {
    try {
      this.logger.info(`Initiating high-quality document generation for type: ${type}`);
      
      const projectAnalysis = await this.projectAnalyzer.analyzeProject(projectPath);
      this.logger.info('Project analysis completed');
      
      const systemPrompt = this.documentGenerator.getSystemPromptForDocumentType(type);
      const userPrompt = `Based on the following project analysis:

${JSON.stringify(projectAnalysis, null, 2)}

Generate a comprehensive and high-quality ${type} document following world-class standards. The document should be extremely detailed, precise, and cover all aspects thoroughly. Use Markdown format for the document structure.`;

      this.logger.info('Generating document content...');
      const stream = await this.client.chat.completions.create({
        model: "gpt-4-1106-preview",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.2,
        max_tokens: 4000,
        stream: true,
      });

      let generatedContent = '';
      for await (const chunk of stream) {
        generatedContent += chunk.choices[0]?.delta?.content || '';
      }

      if (!generatedContent) {
        throw new Error('No content generated by AI');
      }

      const formattedMdContent = this.documentGenerator.formatGeneratedContent(type, generatedContent);
      this.logger.info('Document content generated and formatted');
      
      this.logger.info('Converting document to PDF...');
      const pdfBuffer = await this.mDToPDFConverter.convert(formattedMdContent);
      this.logger.info('PDF conversion completed');

      this.logger.info(`High-quality document generated successfully for type: ${type}`);
      return { md: formattedMdContent, pdf: pdfBuffer };
    } catch (error) {
      this.logger.error(`Error generating high-quality document for type: ${type}`, { error: error instanceof Error ? error.message : String(error) });
      throw error;
    }
  }
}